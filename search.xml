<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>为Github page绑定自定义域名并实现https访问</title>
      <link href="/2018/03/14/%E4%B8%BAGithub-page%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%B9%B6%E5%AE%9E%E7%8E%B0https%E8%AE%BF%E9%97%AE/"/>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br><code>实现目标</code></excerpt></p><ul><li>获取自定义域名<code>yucichueng.me</code>;</li><li>将上述域名(及<strong>www</strong>域名)解析到<code>yucichueng.github.io</code>IP地址;</li><li>将域名解析服务托管于<strong>CloudFlare</strong>;</li><li>获取<strong>SSL</strong>证书，使网站可以通过<strong>https</strong>访问。<a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="获取自定义域名"><a href="#获取自定义域名" class="headerlink" title="获取自定义域名"></a>获取自定义域名</h2>我购买的域名是<code>yucicheung.me</code>。<br>一级域名<code>me</code>在<a href="https://au.godaddy.com/" target="_blank" rel="noopener">GoDaddy</a>网站进行购买。心仪的域名可以在网站<a href="https://www.whois.net/" target="_blank" rel="noopener">whois</a>查看是否被注册，未被注册可在相应域名商处购买。<br><strong>Tips:</strong>如果是在<code>Godaddy</code>购买的域名，建议购买隐私服务(不泄露个人信息)，不是很便宜，所以建议可以直接从国内域名商处购买，赠送隐私保护服务。<h2 id="域名解析到Github-page"><a href="#域名解析到Github-page" class="headerlink" title="域名解析到Github page"></a>域名解析到Github page</h2>购买域名后，在对应域名供应商处一般会提供域名解析服务，我们需要对解析服务进行配置。<br>对我来说，就要在<code>Godaddy</code>域名解析服务处进行配置。<h3 id="修改域名服务商解析记录"><a href="#修改域名服务商解析记录" class="headerlink" title="修改域名服务商解析记录"></a>修改域名服务商解析记录</h3></the></li></ul><ol><li>点击主页右上角自己的账户名–&gt;点击<strong>manage my domains</strong>–&gt;在<strong>My Domains</strong>选择<strong>Manage DNS</strong>;<div align="center"><br><img src="\img\manage_DNS.png" alt="manage_DNS"><br></div></li><li>添加<code>CNAME</code>和<code>A</code>解析记录，使<code>www</code>网址和<code>@</code>(即本身)都指向自己的github page；<br>按以下表格分别添加<strong>A</strong>和<strong>CNAME</strong>两条解析记录：</li></ol><table><thead><tr><th style="text-align:center">类型type</th><th style="text-align:center">主机host</th><th style="text-align:center">指向points to</th><th style="text-align:center">TTL(Time To Live)</th></tr></thead><tbody><tr><td style="text-align:center"><code>A</code></td><td style="text-align:center"><code>@</code></td><td style="text-align:center">github page的IP 地址</td><td style="text-align:center">600</td></tr><tr><td style="text-align:center"><code>CNAME</code></td><td style="text-align:center"><code>www</code></td><td style="text-align:center">github page的网址</td><td style="text-align:center">600</td></tr><tr><td style="text-align:center"><strong>A记录</strong>：<br>用来指定域名的IPv4地址<br>如要将域名指向一个IP地址<br>添加A记录<br><br><strong>CNAME</strong>：<br> 如要将域名指向另一域名<br>再由该域名提供ip<br>添加CNAME记录</td><td style="text-align:center"><strong>www</strong>：<br>解析后域名为<strong><a href="http://www.yucicheung.me" target="_blank" rel="noopener">www.yucicheung.me</a></strong><br><br><strong>@</strong>：<br>解析主域名<strong>yucicheung.me</strong><br><br><strong>*</strong>：<br>泛解析，匹配其他所有域名，<strong>*.yucicheung.me</strong></td><td style="text-align:center">对于<code>A记录</code>:<br>要指向IP地址<br><br>对于<code>CNAME</code>:<br>要指向一个域名<br><br></td><td style="text-align:center">指地方dns缓存域名记录的时间,缓存失效后会再次获取<br><br><strong>600</strong>:<br>建议采用600<br><br><strong>60</strong>:<br>如果经常修改IP可用(修改可快速生效),长期使用略影响解析速度<br><br><strong>3600</strong>:<br>如果IP极少变动(一年几次),可选择 3600,解析速度快</td></tr></tbody></table><p><strong>Tips</strong>：github page的IP地址可以通过以下命令获取：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping yucicheung.github.io</span><br></pre></td></tr></table></figure></p><h3 id="添加github仓库的域名解析记录"><a href="#添加github仓库的域名解析记录" class="headerlink" title="添加github仓库的域名解析记录"></a>添加github仓库的域名解析记录</h3><ol><li><p>按以下命令在自己的github仓库中添加CNAME文件，其中填入购买的域名。或者可以在仓库的<strong>settings</strong>中设置<strong>Custom Domain</strong>设置好自己的域名，github会自动添加CNAME文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ touch CNAME</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'yucicheung.me'</span>&gt; CNAME</span><br></pre></td></tr></table></figure></li><li><p>稍等一下就可以通过购买域名<strong>yucicheung.me</strong>访问<strong>yucicheung.github.io</strong>了，但是这时只能通过<code>http</code>访问自定义域名而非<code>https</code>。</p></li></ol><h2 id="通过HTTPS访问自定义域名"><a href="#通过HTTPS访问自定义域名" class="headerlink" title="通过HTTPS访问自定义域名"></a>通过HTTPS访问自定义域名</h2><p>在完成上述操作以后，只能通过<code>HTTP</code>协议传输(明文传输),于是在通过自定义域名访问自己的github page时，发现浏览器提示<strong>该网址不安全，没有合格的安全证书</strong>，不能通过<code>https</code>(密文传输)访问。</p><h3 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a>HTTP与HTTPS</h3><p><strong>HTTP</strong>是明文传输协议，传输内容容易被嗅探和篡改。<br>而<strong>HTTPS</strong>，即<strong>HTTP over SSL/TLS</strong>,是添加了一层<strong>SSL(Secure Sockets Layer，安全套接层)</strong>，或者是<strong>TLS(Transport Layer Security,传输层安全协议)</strong>，所以<strong>HTTPS</strong>就可以视为<strong>HTTP</strong>和<strong>SSL/TLS</strong>协议的组合。<br><br><br><strong>HTTPS</strong>能做到良好的保密性(防嗅探)，真实性(防篡改)，完整性(防域名劫持和域名欺骗)。</p><h3 id="SSL证书"><a href="#SSL证书" class="headerlink" title="SSL证书"></a>SSL证书</h3><p><strong>SSL</strong>是<strong>TLS</strong>的前身，但<strong>TLS</strong>通常也被标志为<strong>SSL</strong>。<br><strong>SSL/TLS</strong>协议的基本思路是采用公钥加密法，也就是说，客户端先向服务器端索要公钥，然后用公钥加密信息(会话秘钥)，服务器收到密文后，用自己的私钥解密。<br>这个公钥就放在数字证书中。只要证书是可信的，公钥就是可信的。</p><h3 id="申请SSL证书"><a href="#申请SSL证书" class="headerlink" title="申请SSL证书"></a>申请SSL证书</h3><p>SSL证书由你的NS(Name Server，域名服务商)颁发，由于<code>GoDaddy</code>的SSL证书超级贵，所以我们可以迁移到免费提供SSL的NS处，比如国内的<strong>DNSpod</strong>(国内都需要备案),还有国外的<strong>Netlify</strong>和<strong>Cloudflare</strong>，从速度和操作性考虑，本人选择了<code>Cloudflare</code>。</p><ol><li>到<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">Cloudflare官网</a>注册；</li><li>根据指引点击<strong>Add Site</strong>，添加自定义域名<strong>yucicheung.me</strong>，会自动开始扫描DNS解析记录；</li><li>扫描完成后，<strong>Cloudflare</strong>会选择给我们分配两个NS地址，将这两个地址替换<strong>GoDaddy</strong>上的原NS地址，等待生效；<div align="center"><br><img src="/img/change_ns.png" alt="change_ns"><br></div></li><li>在<strong>Cloudflare</strong>上检查自己网站的状态，显示为<code>Active</code>时表示NS更改成功；<div align="center"><br><img src="/img/Active.png" alt="active"><br></div></li><li>在<strong>Cloudflare</strong>将自己网站的<strong>SSL</strong>状态改变为<code>Full</code>状态，等待<strong>Status</strong>变为<code>Active Certificate</code>，通常生效需要十几分钟。<div align="center"><br><img src="/img/full_SSL.png" alt="ssl"><br></div></li><li>再访问自定义域名时，就可以看见是<code>https</code>传输，网址前也有一把绿色小锁,可以看到这个证书其实是Cloudflare的证书。<br><div align="center"><br><img src="/img/https.png" alt="https"><br><img src="/img/ssl.png" alt="ssl"><br></div><h2 id="CDN-关于访问速度"><a href="#CDN-关于访问速度" class="headerlink" title="CDN:关于访问速度"></a>CDN:关于访问速度</h2>如果因为NS在国外，担心访问速度，可以稍微放心。<br><strong>Cloudflare</strong>本身提供<code>CDN</code>(content delivery network,内容分发网络)服务，是指一种通过互联网互相连接的电脑网络系统，利用最靠近每位用户的服务器，就近获取网络内容传递给用户。<br>免费服务一般只能加速<strong>css、js</strong>的引用，而对于<strong>html</strong>和<strong>图片</strong>的加速通常是付费服务。<br>实验过之后，确实是图片加载会稍慢一些，但是整体速度是可以接受的，<strong>如果实在介意速度，建议通过国内NS解析网址</strong>。<br>另：发现Cloudflare已经和baidu合作针对企业级用户启动加速服务，一个节点服务海外访问者，另一个服务国内访问者。<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2></li></ol><ul><li>最后实现的整个系统可以这么理解：就相当于由github提供主机（相当于寄存在github的服务器），自己购买域名，域名指向服务器文件进行展示。</li><li>原本的github主页，域名解析由GitHub负责，SSL证书由github.com提供，所以可以安全访问。现在的域名解析由Cloudflare服务，SSL证书也由其提供。</li></ul>]]></content>
      
      <categories>
          
          <category> Configuration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> SSL </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu下用hexo搭建github博客</title>
      <link href="/2018/03/13/Ubuntu%E4%B8%8B%E7%94%A8hexo%E6%90%AD%E5%BB%BAgithub%E5%8D%9A%E5%AE%A2/"/>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><ul><li>配置环境：<strong>Ubuntu 16.04</strong></li><li>搭建目标：<strong>Github page(username.github.io)</strong></li><li>搭建程序：<strong>hexo</strong></li><li>在新建分支hexo下管理部署文件，最终部署到主分支master进行网站发布，涉及第三方应用绑定。<a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install git-core <span class="comment"># 已安装请略过</span></span><br></pre></td></tr></table></figure></the></li></ul><p>并且在你的github主页创建一个repo，命名为<code>username.github.io</code>，比如对我来说就是<code>yucicheung.github.io</code>。本帖不细述，请参考<a href="https://pages.github.com/" target="_blank" rel="noopener">github page基本指南</a>。</p><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ wget -qO- https://raw.github.com/creationix/nvm/master/install.sh | sh</span><br></pre></td></tr></table></figure><p>重新开启终端使<code>nvm</code>命令生效。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ nvm ls-remote <span class="comment"># 查看所有可用版本</span></span><br><span class="line">$ nvm install v8.10.0 <span class="comment"># 选择最新稳定版本</span></span><br><span class="line">$ node -v <span class="comment">#显示v8.10.0表示安装成功</span></span><br></pre></td></tr></table></figure></p><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt install npm <span class="comment"># 安装package manager</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><h2 id="hexo基础配置"><a href="#hexo基础配置" class="headerlink" title="hexo基础配置"></a>hexo基础配置</h2><h3 id="初始化模板"><a href="#初始化模板" class="headerlink" title="初始化模板"></a>初始化模板</h3><p>用<code>hexo</code>命令初始化一个空文件夹。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init hexo</span><br></pre></td></tr></table></figure></p><p>hexo安装所需的新文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line">hexo $ npm install</span><br></pre></td></tr></table></figure></p><p>改变<code>hexo/</code>文件夹下的<code>_config.yml</code>的一些简单配置包括<code>title</code>,’author’等，之后就可以用以下命令预览。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server <span class="comment"># 默认端口4000</span></span><br></pre></td></tr></table></figure></p><p><strong>Notice:</strong>如果端口<code>4000</code>被占用，或者更换端口预览，或者解除占用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1：更换端口</span></span><br><span class="line">$ hexo server -p 5000</span><br><span class="line"><span class="comment"># 方法2：解除端口占用</span></span><br><span class="line">$ lsof -i:4000</span><br><span class="line">$ <span class="built_in">kill</span> -9 PID</span><br></pre></td></tr></table></figure></p><h2 id="更改主题为yelee"><a href="#更改主题为yelee" class="headerlink" title="更改主题为yelee"></a>更改主题为yelee</h2><p>首先要在<a href="https://hexo.io/themes/index.html" target="_blank" rel="noopener">hexo-themes</a>中选择一个喜欢的主题，从git上<code>clone</code>到本地<code>themes/</code>文件夹下并命名为<code>yelee</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> hexo/</span><br><span class="line">$ git <span class="built_in">clone</span> git@github.com:MOxFIVE/hexo-theme-yelee.git themes/yelee</span><br></pre></td></tr></table></figure></p><p>然后更改<code>hexo/_config.yml</code>中<code>theme: landscape</code>改为<code>theme: yelee</code>，<code>themes/lanscape</code>文件夹可删除。<br>再用<code>hexo server</code>或<code>hexo s</code>就可以预览为新主题了。<br>具体theme中相应主题配置应参考对应theme的官方文档，如<a href="http://moxfive.coding.me/yelee/" target="_blank" rel="noopener">yelee的官方文档</a>。</p><h2 id="部署到网站"><a href="#部署到网站" class="headerlink" title="部署到网站"></a>部署到网站</h2><p><strong>说明:网站的部署其实就是生成静态文件，<code>hexo</code>下所有生成的静态文件会放在<code>public/</code>文件夹中，所谓部署<code>deploy</code>其实就是将<code>public/</code>文件夹中内容上传到git仓库<code>yucicheung.github.io</code>中。</strong><br>要准备将静态文件部署到自己的git主页，首先需要安装一个用于部署的插件<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>，这个插件可以自动将<code>public/</code>文件中内容上传到<code>master</code>下(即用于生成github.io界面的文件)。<br><strong>如果不装插件，也可以手动进行文件复制。</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>然后在<code>hexo/_config.yml</code>的<code>deploy</code>部分配置以下语句。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/yucicheung/yucicheung.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>需要在根据需要修改<code>hexo/</code>和<code>hexo/themes/</code>下的<code>_config.yml</code>文件后，就可以进行生成和部署了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate <span class="comment"># 或hexo g</span></span><br><span class="line">$ hexo deploy <span class="comment"># 或hexo d</span></span><br></pre></td></tr></table></figure></p><p><code>deploy</code>时需要github的账户和密码，自动上传文件完成部署。<br><strong>Tips：</strong>网站再次进行部署时，还需要清理<code>public</code>文件夹内容，重新生成部署，用以下命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></p><h2 id="管理hexo文件"><a href="#管理hexo文件" class="headerlink" title="管理hexo文件"></a>管理hexo文件</h2><p>最好的办法是在<code>username.github.io</code>主页创建两个分支，一个<code>master</code>分支(由deployer管理)，一个<code>hexo</code>分支（我们自己管理）。<br>在把自己的<code>username.github.io</code>仓库克隆到本地后，<code>cd username.github.io</code>，进行以下操作。<br>创建hexo分支并切换到该分支。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b hexo</span><br></pre></td></tr></table></figure></p><p>将<code>hexo/</code>文件夹下所有内容拷贝到<code>username.github.io/hexo/</code>下。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp -r ~/hexo/ ~/yucicheung.github.io/</span><br></pre></td></tr></table></figure></p><p>将修改加入并push到分支<code>hexo</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m <span class="string">"commet"</span></span><br><span class="line">$ git push origin hexo</span><br></pre></td></tr></table></figure></p><p>这样文件管理就很方便了。</p><h2 id="第三方部署"><a href="#第三方部署" class="headerlink" title="第三方部署"></a>第三方部署</h2><p>因为第三方部署跟主题有很大关系，而<a href="http://moxfive.coding.me/yelee/5.Vendor/" target="_blank" rel="noopener">主题文档</a>中说明得比较清楚，我主要讨论一下文档中说明不清的Google站长认证问题。</p><h3 id="Google站长验证"><a href="#Google站长验证" class="headerlink" title="Google站长验证"></a>Google站长验证</h3><ol><li>如果要按照主题定义的方法操作，需要在验证备用方法中选择<code>html验证</code>。</li><li>Google验证，默认方法是提供给你一个html文件，拷贝至<code>theme</code>下的<code>source</code>文件中，在<code>generate</code>的时候会原样生成。<br><strong>Tips:</strong>同理，如果有每次生成都要保存的html文件，请都放置在此文件夹下。如果是<code>README.md</code>文件要保持不被渲染，请添加到<code>hexo/source/</code>下，并且在<code>hexo/_config.yml</code>中配置<code>skip_render: README.md</code>。<h2 id="文章的发表"><a href="#文章的发表" class="headerlink" title="文章的发表"></a>文章的发表</h2>先生成draft，然后发表。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft <span class="string">"title"</span> <span class="comment">#在source/_draft下生成md文件</span></span><br><span class="line">$ hexo publish <span class="string">"title"</span></span><br></pre></td></tr></table></figure></li></ol><p>草稿默认不会显示在页面中，可在配置文件中把render_drafts 参数设为 true 来预览草稿。<br><strong>或</strong>直接生成新文章。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"title"</span> <span class="comment"># 自动生成title.md在_posts下</span></span><br></pre></td></tr></table></figure></p><p>如果要删除文章的话在source下删除文章后，重新生成和部署就可以了</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://hexo.io/zh-cn/docs" target="_blank" rel="noopener">hexo文档</a></li><li><a href="http://moxfive.coding.me/yelee" target="_blank" rel="noopener">yelee主题配置帖</a></li></ol>]]></content>
      
      <categories>
          
          <category> Configuration </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> git </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
